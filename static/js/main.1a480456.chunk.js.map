{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinningSq","onClick","value","Board","i","this","squares","winningSqs","includes","board","r","row","c","push","renderSquare","renderBoard","React","Component","Game","state","history","Array","fill","location","stepNumber","xIsNext","isDescending","slice","length","calculateWinner","winner","Math","floor","col","setState","concat","step","status","current","winData","moves","map","move","desc","jumpTo","reverse","every","x","handleClick","positions","toggleOrdering","lines","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a480456.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className={`square ${props.isWinningSq ? \"winning-sq\" : \"\"}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        isWinningSq={this.props.winningSqs.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderBoard() {\r\n    const numRows = 3;\r\n    const numCols = 3;\r\n    const board = [];\r\n    for (let r = 0; r < numRows; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < numCols; c++) {\r\n        row.push(this.renderSquare(r * numCols + c));\r\n      }\r\n      board.push(\r\n        <div className=\"board-row\" key={r}>\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return board;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderBoard()}</div>;\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          location: null,\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isDescending: false,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    const row = Math.floor(i / 3) + 1;\r\n    const col = (i % 3) + 1;\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          location: `(${row},${col})`,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  toggleOrdering() {\r\n    this.setState({\r\n      isDescending: !this.state.isDescending,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winData = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move\r\n        ? `Go to move #${move} At: ${step.location}`\r\n        : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === this.state.stepNumber ? \"highlight\" : \"\"}\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (this.state.isDescending) moves.reverse();\r\n\r\n    let status;\r\n    if (winData.winner) {\r\n      status = \"Winner: \" + winData.winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    if (!winData.winner && current.squares.every((x) => x)) status = \"Draw\";\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winningSqs={winData.positions}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.toggleOrdering()}>\r\n            {this.state.isDescending ? \"Ascending\" : \"Descending\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        positions: lines[i],\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    positions: [],\r\n  };\r\n}\r\n"],"sourceRoot":""}